% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge.R
\name{merge_samples}
\alias{merge_samples}
\title{Merge Samples}
\usage{
merge_samples(
  experiment,
  data_type = c("tss", "tsr"),
  threshold = NULL,
  sample_sheet = NULL,
  merge_group = NULL,
  merge_list = NULL,
  max_distance = NULL,
  genome_assembly = NULL
)
}
\arguments{
\item{experiment}{TSRexploreR object.}

\item{data_type}{Either 'tss' or 'tsr'.}

\item{threshold}{TSSs or TSRs with a score below this value will not be considered.}

\item{sample_sheet}{A sample sheet data.frame or tab delimited file.
Must have the columns 'sample_name', 'file_1', and 'file_2'.
Additional meta-data columns can be added with sample information such as condition and batch.}

\item{merge_group}{The name of the column in the sample sheet
that has the factor levels to merge samples by.}

\item{merge_list}{Named list of samples to merge.
List names will be the new TSS/TSR name, and the list contents should
be a character vector of the TSSs or TSRs to merge.}

\item{max_distance}{Merge TSRs within this distance.}

\item{genome_assembly}{Genome assembly in FASTA or BSgenome format.}

\item{sample_list}{If merge_group is set to 'FALSE',
specify what samples to merge in list format.
List names will be the new TSS/TSR name, and the list contents should
be a character vector of the TSSs or TSRs to merge.}
}
\value{
TSRexploreR object containing merged TSSs or TSRs.
}
\description{
Merge TSSs or TSRs by group or select samples.
}
\details{
This function will merge overlapping TSSs or TSRs from different samples
  using either the sample sheet, or a named list.
If 'merge_group' is specified, the new merged TSS/TSR set will be the
  factor level in the column, and all TSS/TSR sets sharing that factor level
  will be merged.
If 'merge_list' is specified instead,
  The new TSS/TSR set will be the name of the list element,
  and the samples to merge will be a character vector as the list element.

'merge_distance' is provided for TSRs, and will merge TSRs within a certain
  distance from other TSRs.
}
\examples{
TSSs <- system.file("extdata", "S288C_TSSs.RDS", package="TSRexploreR")
TSSs <- readRDS(TSSs)
sample_sheet <- data.frame(
  sample_name=sprintf("S288C_D_\%s", seq_len(3)),
  file_1=NA, file_2=NA,
  condition="Diamide"
)

tsre <- TSSs \%>\%
  tsr_explorer \%>\%
  format_counts(data_type="tss")

# Merge TSSs by condition column.
merge_samples(tsre, data_type="tss", merge_group="condition")

# Merge TSRs by condition column.
tsre <- tss_clustering(tsre, threshold=3)
merge_samples(tsre, data_type="tsr", merge_group="condition")

}
