% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/motif.R
\name{tss_sequences}
\alias{tss_sequences}
\title{Retrieve Sequences Near TSSs}
\usage{
tss_sequences(experiment, samples = "all", genome_assembly,
  threshold = 1, distance = 10, dominant = FALSE,
  data_conditions = list(order_by = "score"))
}
\arguments{
\item{experiment}{tsrexplorer object with TSS GRanges}

\item{samples}{Either "all" or a vector of names of samples to analyze}

\item{genome_assembly}{Genome assembly in fasta format or bioconductor BSgenome}

\item{threshold}{Keep only TSSs with at least this number of raw counts}

\item{distance}{Bases to add on each side of eacg TSS}

\item{dominant}{Whether to only consider dominant TSSs}

\item{data_conditions}{Condition the data (filter, quantile, and grouping available)}
}
\value{
DataFrame of sequences surrounding TSSs.
}
\description{
Retrieve sequences surrounding TSSs for further plotting
}
\details{
This function will retrieve the genomic sequence surrounding TSSs for later use in
  plotting sequence color maps or sequence logos.

'genome_assembly' must be a valid genome assembly in either fasta or BSgenome format.
fasta formatted genome assemblies should have the file extension '.fasta' or '.fa'.
BSgenome assemblies are precompiled Bioconductor libraries for common organisms.

'distance' controls the length upstream and downstream of the TSS
  from which the sequence will be retrieved.

A set of functions to control data structure for plotting are included.
'threshold' will define the minimum number of reads a TSS or TSR
 must have to be considered.
'dominant' specifies whether only the dominant TSS or TSR is considered 
  from the 'mark_dominant' function.
For TSSs this can be either dominant per TSR or gene, and for TSRs
  it is just the dominant TSR per gene.
'data_conditions' allows for the advanced filtering, ordering, and grouping
  of data.
}
\examples{
TSSs <- system.file("extdata", "S288C_TSSs.RDS", package = "tsrexplorer")
TSSs <- readRDS(TSSs)
tsre_exp <- tsr_explorer(TSSs)
tsre_exp <- format_counts(tsre_exp, data_type = "tss")
assembly <- system.file("extdata", "S288C_Assembly.fasta", package = "tsrexplorer")
seqs <- tss_sequences(tsre_exp, genome_assembly = assembly)

}
\seealso{
\code{\link{plot_sequence_logo}} to make sequence logos.
\code{\link{plot_sequence_colormap}} to make sequence color maps.
}
